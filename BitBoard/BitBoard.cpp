/*
   Copyright(c) 2004 John J.Bolton

   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
   (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify,
   merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
   OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
   LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
   CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#include "BitBoard.h"

#include <cassert>

namespace
{
uint64_t const s_threatenedSquares[NUMBER_OF_PIECE_TYPES][BitBoard::NUMBER_OF_SQUARES] =
{
    // PieceTypeId::KING
    {
        0x0000000000000302ui64, 0x0000000000000705ui64, 0x0000000000000e0aui64, 0x0000000000001c14ui64,
        0x0000000000003828ui64, 0x0000000000007050ui64, 0x000000000000e0a0ui64, 0x000000000000c040ui64,
        0x0000000000030203ui64, 0x0000000000070507ui64, 0x00000000000e0a0eui64, 0x00000000001c141cui64,
        0x0000000000382838ui64, 0x0000000000705070ui64, 0x0000000000e0a0e0ui64, 0x0000000000c040c0ui64,
        0x0000000003020300ui64, 0x0000000007050700ui64, 0x000000000e0a0e00ui64, 0x000000001c141c00ui64,
        0x0000000038283800ui64, 0x0000000070507000ui64, 0x00000000e0a0e000ui64, 0x00000000c040c000ui64,
        0x0000000302030000ui64, 0x0000000705070000ui64, 0x0000000e0a0e0000ui64, 0x0000001c141c0000ui64,
        0x0000003828380000ui64, 0x0000007050700000ui64, 0x000000e0a0e00000ui64, 0x000000c040c00000ui64,
        0x0000030203000000ui64, 0x0000070507000000ui64, 0x00000e0a0e000000ui64, 0x00001c141c000000ui64,
        0x0000382838000000ui64, 0x0000705070000000ui64, 0x0000e0a0e0000000ui64, 0x0000c040c0000000ui64,
        0x0003020300000000ui64, 0x0007050700000000ui64, 0x000e0a0e00000000ui64, 0x001c141c00000000ui64,
        0x0038283800000000ui64, 0x0070507000000000ui64, 0x00e0a0e000000000ui64, 0x00c040c000000000ui64,
        0x0302030000000000ui64, 0x0705070000000000ui64, 0x0e0a0e0000000000ui64, 0x1c141c0000000000ui64,
        0x3828380000000000ui64, 0x7050700000000000ui64, 0xe0a0e00000000000ui64, 0xc040c00000000000ui64,
        0x0203000000000000ui64, 0x0507000000000000ui64, 0x0a0e000000000000ui64, 0x141c000000000000ui64,
        0x2838000000000000ui64, 0x5070000000000000ui64, 0xa0e0000000000000ui64, 0x40c0000000000000ui64
    },
    // PieceTypeId::QUEEN
    {
        0x81412111090503feui64, 0x02824222120a07fdui64, 0x0404844424150efbui64, 0x08080888492a1cf7ui64,
        0x10101011925438efui64, 0x2020212224a870dfui64, 0x404142444850e0bfui64, 0x8182848890a0c07fui64,
        0x412111090503fe03ui64, 0x824222120a07fd07ui64, 0x04844424150efb0eui64, 0x080888492a1cf71cui64,
        0x101011925438ef38ui64, 0x20212224a870df70ui64, 0x4142444850e0bfe0ui64, 0x82848890a0c07fc0ui64,
        0x2111090503fe0305ui64, 0x4222120a07fd070aui64, 0x844424150efb0e15ui64, 0x0888492a1cf71c2aui64,
        0x1011925438ef3854ui64, 0x212224a870df70a8ui64, 0x42444850e0bfe050ui64, 0x848890a0c07fc0a0ui64,
        0x11090503fe030509ui64, 0x22120a07fd070a12ui64, 0x4424150efb0e1524ui64, 0x88492a1cf71c2a49ui64,
        0x11925438ef385492ui64, 0x2224a870df70a824ui64, 0x444850e0bfe05048ui64, 0x8890a0c07fc0a090ui64,
        0x090503fe03050911ui64, 0x120a07fd070a1222ui64, 0x24150efb0e152444ui64, 0x492a1cf71c2a4988ui64,
        0x925438ef38549211ui64, 0x24a870df70a82422ui64, 0x4850e0bfe0504844ui64, 0x90a0c07fc0a09088ui64,
        0x0503fe0305091121ui64, 0x0a07fd070a122242ui64, 0x150efb0e15244484ui64, 0x2a1cf71c2a498808ui64,
        0x5438ef3854921110ui64, 0xa870df70a8242221ui64, 0x50e0bfe050484442ui64, 0xa0c07fc0a0908884ui64,
        0x03fe030509112141ui64, 0x07fd070a12224282ui64, 0x0efb0e1524448404ui64, 0x1cf71c2a49880808ui64,
        0x38ef385492111010ui64, 0x70df70a824222120ui64, 0xe0bfe05048444241ui64, 0xc07fc0a090888482ui64,
        0xfe03050911214181ui64, 0xfd070a1222428202ui64, 0xfb0e152444840404ui64, 0xf71c2a4988080808ui64,
        0xef38549211101010ui64, 0xdf70a82422212020ui64, 0xbfe0504844424140ui64, 0x7fc0a09088848281ui64
    },
    // PieceTypeId::BISHOP
    {
        0x8040201008040200ui64, 0x0080402010080500ui64, 0x0000804020110a00ui64, 0x0000008041221400ui64,
        0x0000000182442800ui64, 0x0000010204885000ui64, 0x000102040810a000ui64, 0x0102040810204000ui64,
        0x4020100804020002ui64, 0x8040201008050005ui64, 0x00804020110a000aui64, 0x0000804122140014ui64,
        0x0000018244280028ui64, 0x0001020488500050ui64, 0x0102040810a000a0ui64, 0x0204081020400040ui64,
        0x2010080402000204ui64, 0x4020100805000508ui64, 0x804020110a000a11ui64, 0x0080412214001422ui64,
        0x0001824428002844ui64, 0x0102048850005088ui64, 0x02040810a000a010ui64, 0x0408102040004020ui64,
        0x1008040200020408ui64, 0x2010080500050810ui64, 0x4020110a000a1120ui64, 0x8041221400142241ui64,
        0x0182442800284482ui64, 0x0204885000508804ui64, 0x040810a000a01008ui64, 0x0810204000402010ui64,
        0x0804020002040810ui64, 0x1008050005081020ui64, 0x20110a000a112040ui64, 0x4122140014224180ui64,
        0x8244280028448201ui64, 0x0488500050880402ui64, 0x0810a000a0100804ui64, 0x1020400040201008ui64,
        0x0402000204081020ui64, 0x0805000508102040ui64, 0x110a000a11204080ui64, 0x2214001422418000ui64,
        0x4428002844820100ui64, 0x8850005088040201ui64, 0x10a000a010080402ui64, 0x2040004020100804ui64,
        0x0200020408102040ui64, 0x0500050810204080ui64, 0x0a000a1120408000ui64, 0x1400142241800000ui64,
        0x2800284482010000ui64, 0x5000508804020100ui64, 0xa000a01008040201ui64, 0x4000402010080402ui64,
        0x0002040810204080ui64, 0x0005081020408000ui64, 0x000a112040800000ui64, 0x0014224180000000ui64,
        0x0028448201000000ui64, 0x0050880402010000ui64, 0x00a0100804020100ui64, 0x0040201008040201ui64
    },
    // PieceTypeId::KNIGHT
    {
        0x0000000000020400ui64, 0x0000000000050800ui64, 0x00000000000a1100ui64, 0x0000000000142200ui64,
        0x0000000000284400ui64, 0x0000000000508800ui64, 0x0000000000a01000ui64, 0x0000000000402000ui64,
        0x0000000002040004ui64, 0x0000000005080008ui64, 0x000000000a110011ui64, 0x0000000014220022ui64,
        0x0000000028440044ui64, 0x0000000050880088ui64, 0x00000000a0100010ui64, 0x0000000040200020ui64,
        0x0000000204000402ui64, 0x0000000508000805ui64, 0x0000000a1100110aui64, 0x0000001422002214ui64,
        0x0000002844004428ui64, 0x0000005088008850ui64, 0x000000a0100010a0ui64, 0x0000004020002040ui64,
        0x0000020400040200ui64, 0x0000050800080500ui64, 0x00000a1100110a00ui64, 0x0000142200221400ui64,
        0x0000284400442800ui64, 0x0000508800885000ui64, 0x0000a0100010a000ui64, 0x0000402000204000ui64,
        0x0002040004020000ui64, 0x0005080008050000ui64, 0x000a1100110a0000ui64, 0x0014220022140000ui64,
        0x0028440044280000ui64, 0x0050880088500000ui64, 0x00a0100010a00000ui64, 0x0040200020400000ui64,
        0x0204000402000000ui64, 0x0508000805000000ui64, 0x0a1100110a000000ui64, 0x1422002214000000ui64,
        0x2844004428000000ui64, 0x5088008850000000ui64, 0xa0100010a0000000ui64, 0x4020002040000000ui64,
        0x0400040200000000ui64, 0x0800080500000000ui64, 0x1100110a00000000ui64, 0x2200221400000000ui64,
        0x4400442800000000ui64, 0x8800885000000000ui64, 0x100010a000000000ui64, 0x2000204000000000ui64,
        0x0004020000000000ui64, 0x0008050000000000ui64, 0x00110a0000000000ui64, 0x0022140000000000ui64,
        0x0044280000000000ui64, 0x0088500000000000ui64, 0x0010a00000000000ui64, 0x0020400000000000ui64
    },
    // PieceTypeId::ROOK
    {
        0x01010101010101feui64, 0x02020202020202fdui64, 0x04040404040404fbui64, 0x08080808080808f7ui64,
        0x10101010101010efui64, 0x20202020202020dfui64, 0x40404040404040bfui64, 0x808080808080807fui64,
        0x010101010101fe01ui64, 0x020202020202fd02ui64, 0x040404040404fb04ui64, 0x080808080808f708ui64,
        0x101010101010ef10ui64, 0x202020202020df20ui64, 0x404040404040bf40ui64, 0x8080808080807f80ui64,
        0x0101010101fe0101ui64, 0x0202020202fd0202ui64, 0x0404040404fb0404ui64, 0x0808080808f70808ui64,
        0x1010101010ef1010ui64, 0x2020202020df2020ui64, 0x4040404040bf4040ui64, 0x80808080807f8080ui64,
        0x01010101fe010101ui64, 0x02020202fd020202ui64, 0x04040404fb040404ui64, 0x08080808f7080808ui64,
        0x10101010ef101010ui64, 0x20202020df202020ui64, 0x40404040bf404040ui64, 0x808080807f808080ui64,
        0x010101fe01010101ui64, 0x020202fd02020202ui64, 0x040404fb04040404ui64, 0x080808f708080808ui64,
        0x101010ef10101010ui64, 0x202020df20202020ui64, 0x404040bf40404040ui64, 0x8080807f80808080ui64,
        0x0101fe0101010101ui64, 0x0202fd0202020202ui64, 0x0404fb0404040404ui64, 0x0808f70808080808ui64,
        0x1010ef1010101010ui64, 0x2020df2020202020ui64, 0x4040bf4040404040ui64, 0x80807f8080808080ui64,
        0x01fe010101010101ui64, 0x02fd020202020202ui64, 0x04fb040404040404ui64, 0x08f7080808080808ui64,
        0x10ef101010101010ui64, 0x20df202020202020ui64, 0x40bf404040404040ui64, 0x807f808080808080ui64,
        0xfe01010101010101ui64, 0xfd02020202020202ui64, 0xfb04040404040404ui64, 0xf708080808080808ui64,
        0xef10101010101010ui64, 0xdf20202020202020ui64, 0xbf40404040404040ui64, 0x7f80808080808080ui64
    },
    // PieceTypeId::PAWN
    {
        0x0000000000000000ui64, 0x0000000000000000ui64, 0x0000000000000000ui64, 0x0000000000000000ui64,
        0x0000000000000000ui64, 0x0000000000000000ui64, 0x0000000000000000ui64, 0x0000000000000000ui64,
        0x0000000000020000ui64, 0x0000000000050000ui64, 0x00000000000a0000ui64, 0x0000000000140000ui64,
        0x0000000000280000ui64, 0x0000000000500000ui64, 0x0000000000a00000ui64, 0x0000000000400000ui64,
        0x0000000002000000ui64, 0x0000000005000000ui64, 0x000000000a000000ui64, 0x0000000014000000ui64,
        0x0000000028000000ui64, 0x0000000050000000ui64, 0x00000000a0000000ui64, 0x0000000040000000ui64,
        0x0000000200000000ui64, 0x0000000500000000ui64, 0x0000000a00000000ui64, 0x0000001400000000ui64,
        0x0000002800000000ui64, 0x0000005000000000ui64, 0x000000a000000000ui64, 0x0000004000000000ui64,
        0x0000020000000000ui64, 0x0000050000000000ui64, 0x00000a0000000000ui64, 0x0000140000000000ui64,
        0x0000280000000000ui64, 0x0000500000000000ui64, 0x0000a00000000000ui64, 0x0000400000000000ui64,
        0x0002000000000000ui64, 0x0005000000000000ui64, 0x000a000000000000ui64, 0x0014000000000000ui64,
        0x0028000000000000ui64, 0x0050000000000000ui64, 0x00a0000000000000ui64, 0x0040000000000000ui64,
        0x0200000000000000ui64, 0x0500000000000000ui64, 0x0a00000000000000ui64, 0x1400000000000000ui64,
        0x2800000000000000ui64, 0x5000000000000000ui64, 0xa000000000000000ui64, 0x4000000000000000ui64,
        0x0000000000000000ui64, 0x0000000000000000ui64, 0x0000000000000000ui64, 0x0000000000000000ui64,
        0x0000000000000000ui64, 0x0000000000000000ui64, 0x0000000000000000ui64, 0x0000000000000000ui64
    }
};
uint64_t const s_destinationSquares[NUMBER_OF_PIECE_TYPES][BitBoard::NUMBER_OF_SQUARES] =
{
    // PieceTypeId::KING
    {
        0x0000000000000302ui64, 0x0000000000000705ui64, 0x0000000000000e0aui64, 0x0000000000001c14ui64,
        0x0000000000003828ui64, 0x0000000000007050ui64, 0x000000000000e0a0ui64, 0x000000000000c040ui64,
        0x0000000000030203ui64, 0x0000000000070507ui64, 0x00000000000e0a0eui64, 0x00000000001c141cui64,
        0x0000000000382838ui64, 0x0000000000705070ui64, 0x0000000000e0a0e0ui64, 0x0000000000c040c0ui64,
        0x0000000003020300ui64, 0x0000000007050700ui64, 0x000000000e0a0e00ui64, 0x000000001c141c00ui64,
        0x0000000038283800ui64, 0x0000000070507000ui64, 0x00000000e0a0e000ui64, 0x00000000c040c000ui64,
        0x0000000302030000ui64, 0x0000000705070000ui64, 0x0000000e0a0e0000ui64, 0x0000001c141c0000ui64,
        0x0000003828380000ui64, 0x0000007050700000ui64, 0x000000e0a0e00000ui64, 0x000000c040c00000ui64,
        0x0000030203000000ui64, 0x0000070507000000ui64, 0x00000e0a0e000000ui64, 0x00001c141c000000ui64,
        0x0000382838000000ui64, 0x0000705070000000ui64, 0x0000e0a0e0000000ui64, 0x0000c040c0000000ui64,
        0x0003020300000000ui64, 0x0007050700000000ui64, 0x000e0a0e00000000ui64, 0x001c141c00000000ui64,
        0x0038283800000000ui64, 0x0070507000000000ui64, 0x00e0a0e000000000ui64, 0x00c040c000000000ui64,
        0x0302030000000000ui64, 0x0705070000000000ui64, 0x0e0a0e0000000000ui64, 0x1c141c0000000000ui64,
        0x3828380000000000ui64, 0x7050700000000000ui64, 0xe0a0e00000000000ui64, 0xc040c00000000000ui64,
        0x0203000000000000ui64, 0x0507000000000000ui64, 0x0a0e000000000000ui64, 0x141c000000000000ui64,
        0x2838000000000000ui64, 0x5070000000000000ui64, 0xa0e0000000000000ui64, 0x40c0000000000000ui64
    },
    // PieceTypeId::QUEEN
    {
        0x81412111090503feui64, 0x02824222120a07fdui64, 0x0404844424150efbui64, 0x08080888492a1cf7ui64,
        0x10101011925438efui64, 0x2020212224a870dfui64, 0x404142444850e0bfui64, 0x8182848890a0c07fui64,
        0x412111090503fe03ui64, 0x824222120a07fd07ui64, 0x04844424150efb0eui64, 0x080888492a1cf71cui64,
        0x101011925438ef38ui64, 0x20212224a870df70ui64, 0x4142444850e0bfe0ui64, 0x82848890a0c07fc0ui64,
        0x2111090503fe0305ui64, 0x4222120a07fd070aui64, 0x844424150efb0e15ui64, 0x0888492a1cf71c2aui64,
        0x1011925438ef3854ui64, 0x212224a870df70a8ui64, 0x42444850e0bfe050ui64, 0x848890a0c07fc0a0ui64,
        0x11090503fe030509ui64, 0x22120a07fd070a12ui64, 0x4424150efb0e1524ui64, 0x88492a1cf71c2a49ui64,
        0x11925438ef385492ui64, 0x2224a870df70a824ui64, 0x444850e0bfe05048ui64, 0x8890a0c07fc0a090ui64,
        0x090503fe03050911ui64, 0x120a07fd070a1222ui64, 0x24150efb0e152444ui64, 0x492a1cf71c2a4988ui64,
        0x925438ef38549211ui64, 0x24a870df70a82422ui64, 0x4850e0bfe0504844ui64, 0x90a0c07fc0a09088ui64,
        0x0503fe0305091121ui64, 0x0a07fd070a122242ui64, 0x150efb0e15244484ui64, 0x2a1cf71c2a498808ui64,
        0x5438ef3854921110ui64, 0xa870df70a8242221ui64, 0x50e0bfe050484442ui64, 0xa0c07fc0a0908884ui64,
        0x03fe030509112141ui64, 0x07fd070a12224282ui64, 0x0efb0e1524448404ui64, 0x1cf71c2a49880808ui64,
        0x38ef385492111010ui64, 0x70df70a824222120ui64, 0xe0bfe05048444241ui64, 0xc07fc0a090888482ui64,
        0xfe03050911214181ui64, 0xfd070a1222428202ui64, 0xfb0e152444840404ui64, 0xf71c2a4988080808ui64,
        0xef38549211101010ui64, 0xdf70a82422212020ui64, 0xbfe0504844424140ui64, 0x7fc0a09088848281ui64
    },
    // PieceTypeId::BISHOP
    {
        0x8040201008040200ui64, 0x0080402010080500ui64, 0x0000804020110a00ui64, 0x0000008041221400ui64,
        0x0000000182442800ui64, 0x0000010204885000ui64, 0x000102040810a000ui64, 0x0102040810204000ui64,
        0x4020100804020002ui64, 0x8040201008050005ui64, 0x00804020110a000aui64, 0x0000804122140014ui64,
        0x0000018244280028ui64, 0x0001020488500050ui64, 0x0102040810a000a0ui64, 0x0204081020400040ui64,
        0x2010080402000204ui64, 0x4020100805000508ui64, 0x804020110a000a11ui64, 0x0080412214001422ui64,
        0x0001824428002844ui64, 0x0102048850005088ui64, 0x02040810a000a010ui64, 0x0408102040004020ui64,
        0x1008040200020408ui64, 0x2010080500050810ui64, 0x4020110a000a1120ui64, 0x8041221400142241ui64,
        0x0182442800284482ui64, 0x0204885000508804ui64, 0x040810a000a01008ui64, 0x0810204000402010ui64,
        0x0804020002040810ui64, 0x1008050005081020ui64, 0x20110a000a112040ui64, 0x4122140014224180ui64,
        0x8244280028448201ui64, 0x0488500050880402ui64, 0x0810a000a0100804ui64, 0x1020400040201008ui64,
        0x0402000204081020ui64, 0x0805000508102040ui64, 0x110a000a11204080ui64, 0x2214001422418000ui64,
        0x4428002844820100ui64, 0x8850005088040201ui64, 0x10a000a010080402ui64, 0x2040004020100804ui64,
        0x0200020408102040ui64, 0x0500050810204080ui64, 0x0a000a1120408000ui64, 0x1400142241800000ui64,
        0x2800284482010000ui64, 0x5000508804020100ui64, 0xa000a01008040201ui64, 0x4000402010080402ui64,
        0x0002040810204080ui64, 0x0005081020408000ui64, 0x000a112040800000ui64, 0x0014224180000000ui64,
        0x0028448201000000ui64, 0x0050880402010000ui64, 0x00a0100804020100ui64, 0x0040201008040201ui64
    },
    // PieceTypeId::KNIGHT
    {
        0x0000000000020400ui64, 0x0000000000050800ui64, 0x00000000000a1100ui64, 0x0000000000142200ui64,
        0x0000000000284400ui64, 0x0000000000508800ui64, 0x0000000000a01000ui64, 0x0000000000402000ui64,
        0x0000000002040004ui64, 0x0000000005080008ui64, 0x000000000a110011ui64, 0x0000000014220022ui64,
        0x0000000028440044ui64, 0x0000000050880088ui64, 0x00000000a0100010ui64, 0x0000000040200020ui64,
        0x0000000204000402ui64, 0x0000000508000805ui64, 0x0000000a1100110aui64, 0x0000001422002214ui64,
        0x0000002844004428ui64, 0x0000005088008850ui64, 0x000000a0100010a0ui64, 0x0000004020002040ui64,
        0x0000020400040200ui64, 0x0000050800080500ui64, 0x00000a1100110a00ui64, 0x0000142200221400ui64,
        0x0000284400442800ui64, 0x0000508800885000ui64, 0x0000a0100010a000ui64, 0x0000402000204000ui64,
        0x0002040004020000ui64, 0x0005080008050000ui64, 0x000a1100110a0000ui64, 0x0014220022140000ui64,
        0x0028440044280000ui64, 0x0050880088500000ui64, 0x00a0100010a00000ui64, 0x0040200020400000ui64,
        0x0204000402000000ui64, 0x0508000805000000ui64, 0x0a1100110a000000ui64, 0x1422002214000000ui64,
        0x2844004428000000ui64, 0x5088008850000000ui64, 0xa0100010a0000000ui64, 0x4020002040000000ui64,
        0x0400040200000000ui64, 0x0800080500000000ui64, 0x1100110a00000000ui64, 0x2200221400000000ui64,
        0x4400442800000000ui64, 0x8800885000000000ui64, 0x100010a000000000ui64, 0x2000204000000000ui64,
        0x0004020000000000ui64, 0x0008050000000000ui64, 0x00110a0000000000ui64, 0x0022140000000000ui64,
        0x0044280000000000ui64, 0x0088500000000000ui64, 0x0010a00000000000ui64, 0x0020400000000000ui64
    },
    // PieceTypeId::ROOK
    {
        0x01010101010101feui64, 0x02020202020202fdui64, 0x04040404040404fbui64, 0x08080808080808f7ui64,
        0x10101010101010efui64, 0x20202020202020dfui64, 0x40404040404040bfui64, 0x808080808080807fui64,
        0x010101010101fe01ui64, 0x020202020202fd02ui64, 0x040404040404fb04ui64, 0x080808080808f708ui64,
        0x101010101010ef10ui64, 0x202020202020df20ui64, 0x404040404040bf40ui64, 0x8080808080807f80ui64,
        0x0101010101fe0101ui64, 0x0202020202fd0202ui64, 0x0404040404fb0404ui64, 0x0808080808f70808ui64,
        0x1010101010ef1010ui64, 0x2020202020df2020ui64, 0x4040404040bf4040ui64, 0x80808080807f8080ui64,
        0x01010101fe010101ui64, 0x02020202fd020202ui64, 0x04040404fb040404ui64, 0x08080808f7080808ui64,
        0x10101010ef101010ui64, 0x20202020df202020ui64, 0x40404040bf404040ui64, 0x808080807f808080ui64,
        0x010101fe01010101ui64, 0x020202fd02020202ui64, 0x040404fb04040404ui64, 0x080808f708080808ui64,
        0x101010ef10101010ui64, 0x202020df20202020ui64, 0x404040bf40404040ui64, 0x8080807f80808080ui64,
        0x0101fe0101010101ui64, 0x0202fd0202020202ui64, 0x0404fb0404040404ui64, 0x0808f70808080808ui64,
        0x1010ef1010101010ui64, 0x2020df2020202020ui64, 0x4040bf4040404040ui64, 0x80807f8080808080ui64,
        0x01fe010101010101ui64, 0x02fd020202020202ui64, 0x04fb040404040404ui64, 0x08f7080808080808ui64,
        0x10ef101010101010ui64, 0x20df202020202020ui64, 0x40bf404040404040ui64, 0x807f808080808080ui64,
        0xfe01010101010101ui64, 0xfd02020202020202ui64, 0xfb04040404040404ui64, 0xf708080808080808ui64,
        0xef10101010101010ui64, 0xdf20202020202020ui64, 0xbf40404040404040ui64, 0x7f80808080808080ui64
    },
    // PieceTypeId::PAWN
    {
        0x0000000000000000ui64, 0x0000000000000000ui64, 0x0000000000000000ui64, 0x0000000000000000ui64,
        0x0000000000000000ui64, 0x0000000000000000ui64, 0x0000000000000000ui64, 0x0000000000000000ui64,
        0x0000000001010000ui64, 0x0000000002020000ui64, 0x0000000004040000ui64, 0x0000000008080000ui64,
        0x0000000010100000ui64, 0x0000000020200000ui64, 0x0000000040400000ui64, 0x0000000080800000ui64,
        0x0000000001000000ui64, 0x0000000002000000ui64, 0x0000000004000000ui64, 0x0000000008000000ui64,
        0x0000000010000000ui64, 0x0000000020000000ui64, 0x0000000040000000ui64, 0x0000000080000000ui64,
        0x0000000100000000ui64, 0x0000000200000000ui64, 0x0000000400000000ui64, 0x0000000800000000ui64,
        0x0000001000000000ui64, 0x0000002000000000ui64, 0x0000004000000000ui64, 0x0000008000000000ui64,
        0x0000010000000000ui64, 0x0000020000000000ui64, 0x0000040000000000ui64, 0x0000080000000000ui64,
        0x0000100000000000ui64, 0x0000200000000000ui64, 0x0000400000000000ui64, 0x0000800000000000ui64,
        0x0001000000000000ui64, 0x0002000000000000ui64, 0x0004000000000000ui64, 0x0008000000000000ui64,
        0x0010000000000000ui64, 0x0020000000000000ui64, 0x0040000000000000ui64, 0x0080000000000000ui64,
        0x0100000000000000ui64, 0x0200000000000000ui64, 0x0400000000000000ui64, 0x0800000000000000ui64,
        0x1000000000000000ui64, 0x2000000000000000ui64, 0x4000000000000000ui64, 0x8000000000000000ui64,
        0x0000000000000000ui64, 0x0000000000000000ui64, 0x0000000000000000ui64, 0x0000000000000000ui64,
        0x0000000000000000ui64, 0x0000000000000000ui64, 0x0000000000000000ui64, 0x0000000000000000ui64
    }
};
} // anonymous namespace

unsigned BitBoard::column(int c) const
{
    unsigned result = 0;
    uint64_t temp   = board_ >> c;
    for (unsigned r = 1; r < 0x100; r <<= 1)
    {
        result |= unsigned(temp & 0xff) & r;
        temp  >>= 7;
    }
    return result;
}

BitBoard const & BitBoard::flip()
{
    uint64_t temp = board_;
    ((uint8_t *)&board_)[0] = ((uint8_t *)&temp)[7];
    ((uint8_t *)&board_)[1] = ((uint8_t *)&temp)[6];
    ((uint8_t *)&board_)[2] = ((uint8_t *)&temp)[5];
    ((uint8_t *)&board_)[3] = ((uint8_t *)&temp)[4];
    ((uint8_t *)&board_)[4] = ((uint8_t *)&temp)[3];
    ((uint8_t *)&board_)[5] = ((uint8_t *)&temp)[2];
    ((uint8_t *)&board_)[6] = ((uint8_t *)&temp)[1];
    ((uint8_t *)&board_)[7] = ((uint8_t *)&temp)[0];

    return *this;
}

BitBoard const & BitBoard::mirror()
{
    uint64_t temp = 0;

    temp  |= (board_ & 0x0101010101010101ui64) << 7;
    temp  |= (board_ & 0x0202020202020202ui64) << 5;
    temp  |= (board_ & 0x0404040404040404ui64) << 3;
    temp  |= (board_ & 0x0808080808080808ui64) << 1;
    temp  |= (board_ & 0x1010101010101010ui64) >> 1;
    temp  |= (board_ & 0x2020202020202020ui64) >> 3;
    temp  |= (board_ & 0x4040404040404040ui64) >> 5;
    temp  |= (board_ & 0x8080808080808080ui64) >> 7;

    board_ = temp;

    return *this;
}

BitBoard BitBoard::threatenedSquares(PieceTypeId type, Position position)
{
    assert(type != PieceTypeId::INVALID);
    assert(position.id() < NUMBER_OF_SQUARES);

    return BitBoard(s_threatenedSquares[(int)type][position.id()]);
}

BitBoard BitBoard::threatenedSquares(PieceTypeId type, Position position, BitBoard const & friends, BitBoard const & foes)
{
    BitBoard rv;

    // First get the uninhibited movement

    rv =  threatenedSquares(type, position);

    // Figure it out

    return rv;
}

BitBoard BitBoard::destinationSquares(PieceTypeId type, Position position)
{
    assert(type != PieceTypeId::INVALID);
    assert(position.id() < NUMBER_OF_SQUARES);

    return BitBoard(s_destinationSquares[(int)type][position.id()]);
}

BitBoard BitBoard::destinationSquares(PieceTypeId type, Position position, BitBoard const & friends, BitBoard const & foes)
{
    BitBoard rv;

    // First get the uninhibited movement

    rv =  destinationSquares(type, position);

    // Figure it out

    return rv;
}

BitBoard BitBoard::blockedSquares(PieceTypeId type, Position position, Position block)
{
    return BitBoard(0);
}
